@use "sass:color";
@use "sass:map";
@use "sass:string";
@use "variables";

// ==========================================================================
// MIXINS - SMACSS Abstracts
// ==========================================================================
// Este archivo contiene mixins reutilizables para el proyecto
// Incluye responsive design, efectos, animaciones, etc.

// Mixin para media queries responsive
@mixin respond-to($breakpoint) {
  @if map.has-key(variables.$breakpoints, $breakpoint) {
    @media (min-width: map.get(variables.$breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' no existe en $breakpoints.";
  }
}

// Mixin para centrar elementos
@mixin center-flex($direction: row, $justify: left, $align: center) {
  display: flex;
  justify-content: $justify;
  align-items: $align;
  flex-direction: $direction;
}

// Mixin para posicionamiento absoluto centrado
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Mixin para texto con efecto neón
@mixin neon-text($color, $intensity: 0.5) {
  color: $color;
  text-shadow: 
    0 0 5px rgba($color, $intensity),
    0 0 10px rgba($color, $intensity * 0.8),
    0 0 15px rgba($color, $intensity * 0.6),
    0 0 20px rgba($color, $intensity * 0.4);
}

// Mixin para resaltar textos
@mixin highlight-text($color_base, $color_h) {
  filter: drop-shadow(0 0 1px $color_base)
          drop-shadow(0 0 1px $color_h)
          drop-shadow(0 0 1px $color_h)
}


// Mixin para botones con efecto hover
@mixin button-hover($bg-color, $hover-color, $text-color: white) {
  background-color: $bg-color;
  color: $text-color;
  border: 2px solid $bg-color;
  transition: variables.$transition-base;
  cursor: pointer;
  
  &:hover {
    background-color: $hover-color;
    border-color: $hover-color;
    transform: translateY(-2px);
    box-shadow: map.get(variables.$shadows, 'lg');
  }
  
  &:active {
    transform: translateY(0);
  }
}

// Mixin para cards con efecto gaming
@mixin gaming-card($border-color: variables.$accent-blue) {
  background: rgba(variables.$primary-bg, 0.9);
  border: 2px solid $border-color;
  border-radius: 0.5rem;
  padding: 1.5rem;
  position: relative;
  overflow: hidden;
  transition: variables.$transition-base;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba($border-color, 0.1),
      transparent
    );
    transition: left 0.5s ease;
  }
  
  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba($border-color, 0.3);
    
    &::before {
      left: 100%;
    }
  }
}

// Mixin para gradientes gaming
@mixin gaming-gradient($color1, $color2, $direction: 45deg) {
  background: linear-gradient($direction, $color1, $color2);
}

// Mixin para animaciones de entrada
@mixin fade-in-up($duration: 0.6s, $delay: 0s) {
  opacity: 0;
  transform: translateY(30px);
  animation: fadeInUp $duration ease-out $delay forwards;
}

@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

// Mixin para animaciones de pulso
@mixin pulse-animation($color, $duration: 2s) {
  animation: pulse-#{string.unique-id()} $duration infinite;
  
  @keyframes pulse-#{string.unique-id()} {
    0%, 100% {
      box-shadow: 0 0 0 0 rgba($color, 0.7);
    }
    50% {
      box-shadow: 0 0 0 10px rgba($color, 0);
    }
  }
}

// Mixin para truncar texto
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Mixin para texto multilínea truncado
@mixin text-truncate-multiline($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Mixin para clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Mixin para aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// Mixin para scrollbar personalizado
@mixin custom-scrollbar($thumb-color: variables.$accent-blue, $track-color: rgba(variables.$primary-bg, 0.5)) {
  &::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  
  &::-webkit-scrollbar-track {
    background: $track-color;
    border-radius: 0.25rem;
  }
  
  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: 0.25rem;
    
    &:hover {
      background: color.adjust($thumb-color, $lightness: 10%);
    }
  }
}

// Mixin para focus states accesibles
@mixin focus-outline($color: variables.$accent-blue) {
  &:focus {
    outline: 2px solid $color;
    outline-offset: 2px;
  }
  
  &:focus:not(:focus-visible) {
    outline: none;
  }
}

// Mixin para media query
@mixin mQ($media){
  @if $media==xsS{
    @media screen and (min-width: variables.$xsScreen){
      @content;
    }
  }
  @else if $media==smallS{
    @media screen and (min-width: variables.$smallScreen){
      @content;
    }
  }

  @else if $media==mediumS{
    @media screen and (min-width: variables.$mediumScreen){
      @content;
    }
  }
  @else if $media==wideS {
    @media screen and (min-width:variables.$wideScreen) {
      @content;
    }
  }
  @else if $media==largeS {
    @media screen and (min-width:variables.$largeScreen) {
      @content;
    }
  }
  @else if $media==xlS {
    @media screen and (min-width:variables.$xlScreen) {
      @content;
    }
  }
  @else if $media==dS {
    @media screen and (min-width:variables.$defScreen) {
      @content;
    }
  }
  @else if $media==hdS{
    @media screen and (min-width: variables.$hdScreen){
      @content;
    }
  }

  @else if $media==bgS{
    @media screen and (min-width: variables.$bigScreen){
      @content;
    }
  }
  @else if $media==ckS{
    @media screen and (min-width: variables.$ckScreen){
      @content;
    }
  }
}